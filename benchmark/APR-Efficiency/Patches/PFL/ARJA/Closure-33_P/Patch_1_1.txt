--- /tmp/Arja_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	2019-08-10 04:16:17.727546252 -0400
+++ /tmp/Arja_Defects4J_Closure_33/patches_h3z6/Patch_1/patched/com/google/javascript/rhino/jstype/PrototypeObjectType.java	2019-08-10 04:35:39.170615308 -0400
@@ -555,27 +555,6 @@
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
-        }
-      }
-    }
+    
   }
 }


