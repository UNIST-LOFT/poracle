--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2019-08-04 05:16:19.013557221 -0400
+++ /tmp/GenProg_Defects4J_Math_81/patches_kor0/Patch_5/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java	2019-08-04 05:26:03.877856043 -0400
@@ -903,19 +903,6 @@
                     offDiagMin = work[4 * i0 + 2];
                     double previousEMin = work[4 * i0 + 3];
                     for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {
-                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&
-                            (work[i + 2] <= TOLERANCE_2 * sigma)) {
-                            // insert a split
-                            work[i + 2]  = -sigma;
-                            split        = i / 4;
-                            diagMax      = 0;
-                            offDiagMin   = work[i + 6];
-                            previousEMin = work[i + 7];
-                        } else {
-                            diagMax      = Math.max(diagMax, work[i + 4]);
-                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);
-                            previousEMin = Math.min(previousEMin, work[i + 3]);
-                        }
                     }
                     work[4 * n0 - 2] = offDiagMin;
                     work[4 * n0 - 1] = previousEMin;
@@ -1539,26 +1526,7 @@
                 }
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
+                computeGershgorinCircles();
 
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);


