--- /tmp/GenProg_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypeValidator.java	2019-08-13 23:58:05.775697913 -0400
+++ /tmp/GenProg_Defects4J_Closure_117/patches_5zlj/Patch_35/patched/com/google/javascript/jscomp/TypeValidator.java	2019-08-14 00:19:29.463834626 -0400
@@ -725,34 +725,6 @@
 
     // The best type name is the actual type name.
 
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
-    if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
-        String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
-      }
-    }
-
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();


